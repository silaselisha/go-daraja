{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Go Daraja (M\u2011Pesa) Client","text":"<p>A lightweight, idiomatic Go client for Safaricom's Daraja (M\u2011Pesa) APIs. Clean configuration, safe defaults, and a consistent API for core payment flows.</p> <p></p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Simple, composable client construction with functional options</li> <li>Context-aware APIs for cancellation and timeouts</li> <li>Embedded X.509 certs and typed error model</li> <li>Covers STK Push, B2C, C2B, B2B and Business Express</li> <li>12\u2011factor configuration from environment (optional <code>.env</code>)</li> </ul>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Getting started: Installation \u00b7 Quickstart</li> <li>Usage guides: STK Push, B2C, C2B, B2B, Business Express</li> <li>Reference: API, Environment variables</li> <li>Support: Troubleshooting \u00b7 FAQ</li> </ul>"},{"location":"#project-structure","title":"Project structure","text":"<pre><code>pkg/\n  handler/          # Public client and operations\n  internal/\n    auth/           # Basic auth token creation\n    builder/        # Helpers (base URLs, phone formatting, timestamp)\n    config/         # Viper-based configuration loader\n    x509/           # go:embed certs + security credential generation\nexample/            # Example .env and sample usage\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>The client is configured via environment variables. A <code>.env</code> file in a specified directory may be read if you pass <code>WithEnvFile(path)</code> (or use <code>NewDarajaClient(path)</code>). OS environment variables always take precedence.</p>"},{"location":"configuration/#required","title":"Required","text":"<ul> <li><code>MPESA_ENVIRONMENT</code> \u2014 <code>sandbox</code> or <code>production</code> (default: <code>sandbox</code>)</li> <li><code>DARAJA_CONSUMER_KEY</code></li> <li><code>DARAJA_CONSUMER_SECRET</code></li> </ul>"},{"location":"configuration/#common-stk-push-c2b","title":"Common (STK Push / C2B)","text":"<ul> <li><code>DARAJA_BUSINESS_SHORT_CODE</code></li> <li><code>DARAJA_PASS_KEY</code></li> <li><code>DARAJA_TRANSACTION_TYPE</code> (default: <code>CustomerPayBillOnline</code>)</li> <li><code>DARAJA_CALL_BACK_URL</code></li> <li><code>DARAJA_ACCOUNT_REF</code></li> </ul>"},{"location":"configuration/#b2c","title":"B2C","text":"<ul> <li><code>DARAJA_INITIATOR_NAME</code></li> <li><code>DARAJA_INITIATOR_PASSWORD</code></li> <li><code>DARAJA_BUSINESS_CONSUMR_PARTY_A</code> (your B2C PartyA short code)</li> </ul>"},{"location":"configuration/#business-express","title":"Business Express","text":"<ul> <li><code>DARAJA_BUSINESS_EXPRESS_CHECKOUT_SHORT_CODE</code></li> </ul>"},{"location":"configuration/#optional","title":"Optional","text":"<ul> <li><code>DARAJA_PARTY_A</code>, <code>DARAJA_PARTY_B</code></li> <li><code>DARAJA_CREDIT_PARTY_IDENTIFIER</code></li> </ul>"},{"location":"configuration/#loading-order","title":"Loading order","text":"<ul> <li>Defaults applied by the loader</li> <li>Values from <code>.env</code> in the provided path (if the file exists)</li> <li>OS environment variables (override everything)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome! Please:</p> <ul> <li>Read <code>CONTRIBUTING.md</code></li> <li>Open an issue to discuss large changes</li> <li>Submit PRs with clear descriptions and tests</li> </ul>"},{"location":"security/","title":"Security","text":"<p>If you discover a security vulnerability, please follow the process in <code>SECURITY.md</code>.</p> <p>Do not open public issues for security reports.</p>"},{"location":"advanced/http-client/","title":"Custom HTTP client","text":"<p>Inject a custom <code>*http.Client</code> to control timeouts, retries, proxies, and tracing.</p> <pre><code>httpClient := &amp;http.Client{ Timeout: 30 * time.Second }\nclient, err := daraja.NewClient(\n  daraja.WithHTTPClient(httpClient),\n)\n</code></pre>"},{"location":"advanced/logging/","title":"Logging","text":"<p>Provide a logger implementing the minimal interface to get observability into requests and responses.</p> <pre><code>client, err := daraja.NewClient(\n  daraja.WithLogger(myLogger),\n)\n</code></pre> <p>The logger is optional. If omitted, the client operates silently.</p>"},{"location":"advanced/options/","title":"Functional options","text":"<p>The client supports functional options to customize construction.</p> <pre><code>client, err := daraja.NewClient(\n  daraja.WithEnvFile(\"./example\"),    // Load .env from path (optional)\n  daraja.WithHTTPClient(httpClient),   // Inject custom *http.Client\n  daraja.WithLogger(logger),           // Provide a logger with Debugf/Infof/Errorf\n)\n</code></pre>"},{"location":"advanced/options/#logger-interface","title":"Logger interface","text":"<pre><code>type Logger interface {\n  Debugf(format string, args ...any)\n  Infof(format string, args ...any)\n  Errorf(format string, args ...any)\n}\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<pre><code>go get github.com/silaselisha/go-daraja\n</code></pre> <p>Then import and construct a client:</p> <pre><code>import (\n  daraja \"github.com/silaselisha/go-daraja/pkg/handler\"\n)\n\nfunc main() {\n  client, err := daraja.NewClient()\n  if err != nil { panic(err) }\n  _ = client\n}\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Go &gt;= 1.22</li> <li>Network access to Safaricom Daraja endpoints</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>The client reads configuration from environment variables (12\u2011factor). You may also provide a path to a directory containing a <code>.env</code> file using <code>WithEnvFile</code> or the backward\u2011compatible <code>NewDarajaClient</code>.</p>"},{"location":"getting-started/quickstart/#minimal-example","title":"Minimal example","text":"<pre><code>package main\n\nimport (\n  \"log\"\n  daraja \"github.com/silaselisha/go-daraja/pkg/handler\"\n)\n\nfunc main() {\n  client, err := daraja.NewClient()\n  if err != nil { log.Fatal(err) }\n\n  // STK Push (NI)\n  _, err = client.NIPush(\"payment for order #123\", \"0712345678\", 100)\n  if err != nil { log.Fatal(err) }\n}\n</code></pre>"},{"location":"getting-started/quickstart/#with-functional-options","title":"With functional options","text":"<pre><code>httpClient := &amp;http.Client{ Timeout: 20 * time.Second }\nclient, err := daraja.NewClient(\n  daraja.WithHTTPClient(httpClient),\n  daraja.WithEnvFile(\"./example\"), // loads ./example/.env if present\n)\n</code></pre>"},{"location":"getting-started/quickstart/#backwardcompatible-constructor","title":"Backward\u2011compatible constructor","text":"<pre><code>client, err := daraja.NewDarajaClient(\"./example\")\n</code></pre>"},{"location":"reference/api/","title":"API Reference","text":"<p>Public interface <code>Daraja</code> methods:</p> <pre><code>// Construct with NewClient or NewDarajaClient\nNewClient(opts ...Option) (*DarajaClient, error)\nNewDarajaClient(path string) (Daraja, error)\n\n// Operations\nNIPush(description string, phoneNumber string, amount float64) (*DarajaResParams, error)\nBusinessToConsumer(amount float64, txnType txnType, customerNo, remarks, timeoutURL, resultURL string) (*DarajaResParams, error)\nCustomerToBusiness(confirmationURL, validationURL string, responseType b2cType) (*DarajaResParams, error)\nBusinessBuyGoods(amount float64, username, shortCode, commandID, remarks, resultURL, queueTimeOutURL, receiverID, senderID, accountRefrence string) (*DarajaResParams, error)\nBusinessExpressCheckout(paymentRef, callbackURL, partnerName, receiver string, amount float64) (*DarajaResParams, error)\n</code></pre>"},{"location":"reference/api/#types","title":"Types","text":"<pre><code>type txnType int\nconst (\n  SalaryPayment txnType = iota\n  BusinessPayment\n  PromotionalPayment\n)\n\ntype b2cType int\nconst (\n  CANCELLED b2cType = iota\n  COMPLETED\n)\n\n// Response envelope\ntype DarajaResParams struct {\n  ConversationID           string\n  OriginatorConversationID string\n  ResponseCode             string\n  ResponseDescription      string\n  CustomerMessage          string\n  ResponseBody             struct {\n    Code   string `json:\"code\"`\n    Status string `json:\"status\"`\n  }\n  DarajaErrorParams\n}\n\ntype DarajaErrorParams struct {\n  RequestID    string `json:\"requestId\"`\n  ErrorCode    string `json:\"errorCode\"`\n  ErrorMessage string `json:\"errorMessage\"`\n}\n</code></pre>"},{"location":"reference/environment/","title":"Environment variables","text":"Variable Purpose Default <code>MPESA_ENVIRONMENT</code> Target environment: <code>sandbox</code> or <code>production</code> <code>sandbox</code> <code>DARAJA_CONSUMER_KEY</code> API consumer key \u2014 <code>DARAJA_CONSUMER_SECRET</code> API consumer secret \u2014 <code>DARAJA_BUSINESS_SHORT_CODE</code> Short code for your business \u2014 <code>DARAJA_PASS_KEY</code> Pass key for STK push \u2014 <code>DARAJA_TRANSACTION_TYPE</code> STK transaction type <code>CustomerPayBillOnline</code> <code>DARAJA_CALL_BACK_URL</code> Callback URL for STK push \u2014 <code>DARAJA_ACCOUNT_REF</code> Account reference for STK push \u2014 <code>DARAJA_INITIATOR_NAME</code> B2C/B2B initiator \u2014 <code>DARAJA_INITIATOR_PASSWORD</code> B2C/B2B initiator password \u2014 <code>DARAJA_BUSINESS_CONSUMR_PARTY_A</code> B2C PartyA shortcode \u2014 <code>DARAJA_CREDIT_PARTY_IDENTIFIER</code> Credit party identifier (optional) \u2014 <code>DARAJA_BUSINESS_EXPRESS_CHECKOUT_SHORT_CODE</code> Primary shortcode for Business Express \u2014"},{"location":"support/faq/","title":"FAQ","text":"<ul> <li>Why does client construction succeed even if the network is down?</li> <li> <p>To improve local development experience, the auth flow maps network errors to a typed unreachable error rather than failing construction outright.</p> </li> <li> <p>Where do I put my <code>.env</code> file?</p> </li> <li>Place it in a directory and pass that directory to <code>WithEnvFile(path)</code> or <code>NewDarajaClient(path)</code>. The file name must be <code>.env</code>.</li> </ul>"},{"location":"support/troubleshooting/","title":"Troubleshooting","text":"<ul> <li>Service unreachable (ErrorCode <code>500.003.1001</code>): The SDK maps network or non-JSON errors to a generic Daraja error with this code and message: \"Service is currently unreachable. Please try again later.\" Check network connectivity, credentials, and Daraja service status.</li> <li>Invalid phone number: Numbers must match local <code>07</code> or <code>01</code> format before normalization.</li> <li>Auth fails: Ensure <code>DARAJA_CONSUMER_KEY</code> and <code>DARAJA_CONSUMER_SECRET</code> are set and <code>MPESA_ENVIRONMENT</code> is valid (<code>sandbox</code>/<code>production</code>).</li> </ul>"},{"location":"usage/b2b/","title":"Business to Business (B2B) - BuyGoods","text":"<p>Transfer funds between short codes.</p> <pre><code>res, err := client.BusinessBuyGoods(\n  100,                 // amount\n  \"initiator\",        // username (Initiator)\n  \"600000\",           // receiver short code\n  \"BusinessPayBill\",  // command ID (per API spec)\n  \"invoice #123\",     // remarks\n  \"https://example.com/result\",\n  \"https://example.com/timeout\",\n  \"4\",                // receiver identifier type\n  \"4\",                // sender identifier type\n  \"ACC-REF-123\",      // account reference\n)\n</code></pre> <ul> <li>Generates SecurityCredential from embedded certs.</li> <li>Uses your <code>DARAJA_BUSINESS_SHORT_CODE</code> as PartyA.</li> <li>Endpoint: <code>mpesa/b2b/v1/paymentrequest</code>.</li> </ul>"},{"location":"usage/b2c/","title":"Business to Consumer (B2C)","text":"<p>Send funds from a business short code to a consumer MSISDN.</p> <pre><code>res, err := client.BusinessToConsumer(\n  100,                 // amount\n  daraja.SalaryPayment, // txnType (SalaryPayment|BusinessPayment|PromotionalPayment)\n  \"0712345678\",       // customer number\n  \"salary for June\",  // remarks\n  \"https://example.com/timeout\", // queue timeout URL\n  \"https://example.com/result\",  // result URL\n)\n</code></pre> <ul> <li>Requires <code>DARAJA_INITIATOR_NAME</code>, <code>DARAJA_INITIATOR_PASSWORD</code> to derive SecurityCredential (embedded certs).</li> <li>Also uses <code>DARAJA_BUSINESS_CONSUMR_PARTY_A</code>.</li> <li>Endpoint: <code>mpesa/b2c/v1/paymentrequest</code>.</li> </ul>"},{"location":"usage/business-express/","title":"Business Express Checkout","text":"<p>Initiate a USSD push to collect MSISDN and proceed with payment.</p> <pre><code>res, err := client.BusinessExpressCheckout(\n  \"PAY-123\",                     // paymentRef\n  \"https://example.com/callback\",// callback URL\n  \"YourBiz\",                     // partner name\n  \"600000\",                      // receiver short code\n  100,                            // amount\n)\n</code></pre> <ul> <li>Uses <code>DARAJA_BUSINESS_EXPRESS_CHECKOUT_SHORT_CODE</code> as the primary shortcode.</li> <li>Endpoint: <code>/v1/ussdpush/get-msisdn</code>.</li> </ul>"},{"location":"usage/c2b/","title":"Customer to Business (C2B) - Register URLs","text":"<p>Register validation and confirmation URLs for your shortcode.</p> <pre><code>res, err := client.CustomerToBusiness(\n  \"https://example.com/confirm\",\n  \"https://example.com/validate\",\n  daraja.COMPLETED, // or daraja.CANCELLED\n)\n</code></pre> <ul> <li>Uses your <code>DARAJA_BUSINESS_SHORT_CODE</code>.</li> <li>Endpoint: <code>mpesa/c2b/v1/registerurl</code>.</li> </ul>"},{"location":"usage/ni-push/","title":"STK Push (NI)","text":"<p>Initiate an STK Push to a customer's handset.</p> <pre><code>res, err := client.NIPush(\n  \"payment for order #123\", // description\n  \"0712345678\",             // phone number (07/01 format)\n  100,                       // amount\n)\n</code></pre> <ul> <li>Uses <code>DARAJA_BUSINESS_SHORT_CODE</code>, <code>DARAJA_PASS_KEY</code>, <code>DARAJA_CALL_BACK_URL</code>, <code>DARAJA_ACCOUNT_REF</code>, and <code>DARAJA_TRANSACTION_TYPE</code>.</li> <li>Phone numbers are normalized using the internal formatter; must match <code>07</code>/<code>01</code> local format.</li> <li>Endpoint: <code>mpesa/stkpush/v1/processrequest</code> on the selected base URL.</li> </ul>"}]}